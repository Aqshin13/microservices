spring.config.import=optional:configserver:http://localhost:8888
spring.application.name=currency-exchange
server.port=8000

spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.h2.console.enabled=true
#Yeni menim tables create olandan sonra query buraxilsin yoxsa xeta verecek (altdaki config)
spring.jpa.defer-datasource-initialization=true

#Eureka Config
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#Retry 3 defe yeniden sorgu gondermeye imkan verir.Asagidaki configurasiya ile bunu artria ve azalda bilerik
#sample-api Retry name ile eyni olmalidi
resilience4j.retry.instances.sample-api.maxAttempts=5
#resilience4j.retry.instances.sample-api.maxRetryAttempts=5 #OLD

#Biz dedik ki @Retry edende her defe yeniden sorgu gonderir.
#Biz bo sorgular arasindaki intervali deyise bilerik.(undercomment)
#Yeni 2 saniyeden bir sorgu gonderir
resilience4j.retry.instances.sample-api.waitDuration=2s
#Hemcinin yeniden sorgu arasindaki intervallari mueyyen interval ile artira bilerik,
#Meselen birinci sorgu 1san,2ci sorgu 2,4,8,16 ve s...
#Bunu asagidaki config teyin  edir
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#Eger sorgularin 90%-i ugursuz olarsa Circuit Breaker open olar
#resilience4j.circuitbreaker.instances.default.failureRateThreshold=90

#rate limiter ucun configler. beleki 10 saniyede 2 sorguya icaze verir
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s


#Yeni eyni anda 10 dene sorguya icaze verir.
#resilience4j.bulkhead.instances.default.maxConcurrentCalls=10
resilience4j.bulkhead.instances.sample-api.maxConcurrentCalls=10



management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

